?random
??random
1
1+1
1 + 1
x = 1
y = 2
z = x + y
z
install.packages("igraph")
#install.packages("igraph")
library(igraph)
require(igraph)
help(igraph)
graph.star(10)
g = graph.star(10)
g
plot(g)
g = graph.ring(10)
plot(g)
g = barabasi.game(50)
plot(g)
g = barabasi.game(10)
plot(g)
g = graph.full(10)
plot(g)
?graph.tree
g = graph.tree(10, 2)
plot(g)
g = graph.tree(20, 2)
plot(g)
?plot
s = 0.02759501
n = 10000
2*exp(-(2.000071+.331/sqrt(n)+1.409/n)*s);
s = 0.02759501
n = 5000
2*exp(-(2.000071+.331/sqrt(n)+1.409/n)*s);
n = 500
2*exp(-(2.000071+.331/sqrt(n)+1.409/n)*s);
?ks.test
x <- rnorm(50)
y <- runif(30)
# Do x and y come from the same distribution?
ks.test(x, y)
x <- rnorm(50)
y <- rnorm(30)
# Do x and y come from the same distribution?
ks.test(x, y)
library(igraph)
?powerlaw.fit
?power.law.fit
g <- barabasi.game(1000) # increase this number to have a better estimate
d <- degree(g, mode="in")
fit1 <- power.law.fit(d+1, 10)
summary(fit1)
fit1$KS.p
fit1$KS.stat
fit1$KS.alpha
fit1$alpha
devtools::install_github("hadley/devtools")
library(devtools)
has_devel()
library(roxygen2)
library(testthat)
devtools::session_info()
set.seed(20150610)
dat = runif(300, min=0, max=100)
logit.transformation = function(x){
px = x/sum(x)
odds = px/(1-px)
logit.odds = log(odds)
return(logit.odds)
}
logit.transformation(dat)
datt = logit.transformation(dat)
hist(datt, breaks = 30)
hist(dat, breaks = 30)
install.packages("nutshell")
library(nutshell)
set.seed(20150610)
dat = runif(300, min=0, max=100)
hist(dat, breaks = 30)
?runif
dat = rnorm(300, mean = 300, sd = 20)
hist(dat, breaks = 30)
inc = rnorm(300, mean = 3000, sd = 500)
hist(inc, breaks = 30)
age = runif(300, min=0, max=100)
cor.test(age, inc)
inc = rnorm(3000, mean = 3000, sd = 500)
hist(inc, breaks = 30)
inc = rnorm(30000, mean = 3000, sd = 500)
hist(inc, breaks = 30)
inc = rnorm(300000, mean = 3000, sd = 500)
hist(inc, breaks = 30)
?t.test
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec(user=F)
require(IRkernel)
IRkernel::installspec(user=F)
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')),
type = 'source')
require(IRkernel)
IRkernel::installspec(user=F)
IRkernel::installspec(user=F)
r <- getOption('repos')
r$IRkernel <- 'http://irkernel.github.io/'
options(repos = r)
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
require(IRkernel)
IRkernel::installspec(user=F)
IRkernel::installspec()
IRkernel::installspec()
require('devtools')
install.packages('devtools')
install_github('armstrtw/rzmq')
require('devtools')
install_github('armstrtw/rzmq')
require(IRkernel)
IRkernel::installspec(user=F)
install_github('armstrtw/rzmq')
ipython qtconsole --kernel=ir
“中国”
"中国"
"中国"
"中国"
"中国"
"中国"
Encoding("中国")
sessionInfo()
Encoding("中国")
1+1
"Arr,matey"
6*7
3<4
2+2==5
T == TRUE
x <- 42
x / 2
x <- "Arr, matey!"
x
x <- TRUE
sum(1, 3, 5)
rep("Yo ho!", times = 3)
sqrt(16)
help(sum)
example(min)
?
?
###########chapter2############
# start chapter2 below
c(4,7,9)
c(4,7,9)
c("a","b","c")
c(1, TRUE, "three")
5:9
seq(5, 9)
seq(5, 9, 0.5)
9:5
sentence <- c('walk', 'the', 'plank')
sentence[3]
sentence[1]
sentence[3] <- "dog"
sentence[4] <- 'to'
sentence[c(1, 3)]
sentence[2:4]
sentence[5:7] <- c('the', 'poop', 'deck')
sentence[6]
ranks <- 1:3
names(ranks) <- c("first", "second", "third")
ranks["first"]
ranks["third"] <- 4
vesselsSunk <- c(4, 5, 1)
barplot(vesselsSunk)
barplot(vesselsSunk)
a <- c(1, 2, 3)
a + 1
a / 2
a*2
b <- c(4, 5, 6)
a + b
a-b
a == c(1, 99, 3)
a<1
sin(a)
sqrt(a)
x <- seq(1, 20, 0.1)
y <- sin(x)
plot(x, y)
absolutes <- abs(values)
plot(values, absolutes)
a <- c(1, 3, NA, 7, 9)
values <- -10:10
values
absolutes <- abs(values)
plot(values, absolutes)
a <- c(1, 3, NA, 7, 9)
sum(a)
a <- c(1, 3, NA, 7, 9)
sum(a)
sum(a, na.rm = TRUE)
c(4,7,9)
setwd()
getwd()
1+1
"Arr, matey!"
6 * 7
3 < 4
2 + 2 == 5
T == TRUE
x <- 42
x / 2
x <- "Arr, matey!"
6 * 7
3 < 4
2 + 2 == 5
T == TRUE
x <- 42
x / 2
x <- "Arr, matey!"
x
x <- TRUE
sum(1, 3, 5)
rep("Yo ho!", times = 3)
sqrt(16)
help(sum)
example(min)
#source("bottle1.R")
#source("bottle2.R")
###########chapter2############
c(4,7,9)
c('a','b','c')
c(1,TRUE,"THREE")
5:9
seq(5,9)
seq(5,9,0.5)
9:5
sentence <- c('walk', 'the', 'plank')
sentence[3]
sentence[1]
sentence[3]<- "dog"
sentence[4] <- 'to'
sentence[c(1,3)]
sentence[2:4]
sentence[5:7] <- c('the', 'poop', 'deck')
sentence[6]
ranks <- 1:3
names(ranks) <- c("first", "second", "third")
ranks["third"] <- 4
vesselsSunk <- c(4, 5, 1)
barplot(vesselsSunk)
barplot(vesselsSunk)
a <- c(1, 2, 3)
a + 1
a/2
a*2
b <- c(4,5,6)
a + b
a - b
a == c(1, 99, 3)
a <= c(1, 99, 3)
sin(a)
sqrt(a)
x <- seq(1, 20, 0.1)
y <- sin(x)
plot(x, y)
absolutes <- abs(values)
plot(values, absolutes)
values <- -10:10
absolutes <- abs(values)
plot(values, absolutes)
sum(a)
help(sum)
sum(a, na.rm = TRUE)
###########chapter3############
matrix(0, 3, 4)
a <- 1:12
print(a)
matrix(a, 3, 4)
plank <- 1:8
dim(plank) <- c(2,4)
print(plank)
matrix(1, 5, 5)
print(plank)
plank[2, 3]
plank [1, 4]
plank[1, 4] <- 0
plank[2,]
plank[,4]
plank[, 2:4]
elevation <- matrix(1, 10, 10)
elevation[4, 6] <- 0
contour(elevation)
persp(elevation, expand=0.2)
persp(volcano, expand=0.2)
##########chapter4###########
limbs <- c(4, 3, 4, 3, 2, 4, 4, 4)
names(limbs) <- c ('One-Eye', 'Peg-Leg', 'Smitty', 'Hook', 'Scooter', 'Dan', 'Mikey', 'Blackbeard')
mean(limbs)
barplot(limbs)
limbs <- c(4, 3, 4, 3, 2, 4, 4, 14)
names(limbs) <- c('One-Eye', 'Peg-Leg', 'Smitty', 'Hook',
'Scooter', 'Dan', 'Mikey', 'Davy Jones')
mean(limbs)
barplot(limbs)
median(limbs)
abline(h = median(limbs))
pounds <- c(45000, 50000, 35000, 40000, 35000, 45000, 10000, 15000)
barplot(pounds)
abline(h = meanValue)
deviation <- sd(pounds)
abline(h = meanValue + deviation)
meanValue <- mean(pounds)
abline(h = meanValue)
deviation <- sd(pounds)
abline(h = meanValue + deviation)
abline(h = meanValue - deviation)
setwd("("/Users/chengjun/GitHub/djclass2015/code/")
)
setwd("/Users/chengjun/GitHub/djclass2015/code/")
gdp <- read.table("gdp.txt", sep="\t", header=TRUE)
gdp <- read.table("gdp.txt", sep="\t", header=TRUE)
?merge
piracy <- read.csv("piracy.csv")
piracy <- read.csv("piracy.csv")
piracy
gdp
countries <- merge(x = gdp, y = piracy)
plot(countries$GDP, countries$Piracy)
cor.test(countries$GDP, countries$Piracy)
line <- lm(countries$Piracy ~ countries$GDP)
countries
